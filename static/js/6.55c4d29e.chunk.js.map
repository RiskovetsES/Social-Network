{"version":3,"sources":["HOC/withAuthRedirect.jsx","assets/images/avatar.png","components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusHooks.jsx","components/Contacts/UserContacts.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/AddPostForm/AddPostForm.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/PostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthComponent","Component","RedirectComponent","this","props","to","React","connect","module","exports","ProfileStatusHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","putStatus","type","UserContacts","title","ProfileInfo","isOwner","profile","putUserStatusTC","savePhotoTC","Preloader","photos","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","console","log","Object","entries","src","large","avatar","width","height","alt","target","files","length","map","values","Post","memo","message","AddPostReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","component","name","MyPosts","postsComponents","profilePage","posts","post","postText","addPost","compose","dispatch","text","addPostAC","onPostChange","updateNewPostTextAC","Profile","className","P","content","PostsContainer","ProfileContainer","userId","match","params","id","getProfileTC","getUserStatusTC","refreshProfile","prevProps","prevState","snapshot","setUserProfile","setUserProfileAC","withRouter"],"mappings":"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","file":"static/js/6.55c4d29e.chunk.js","sourcesContent":["/* eslint-disable */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nconst mapStateToProps = (state) => ({\n  isAuth: state.auth.isAuth\n})\n\nconst withAuthComponent = (Component) => {\n  class RedirectComponent extends React.Component {\n    render() {\n      if (!this.props.isAuth) return <Redirect to=\"/login\" />;\n      return <Component {...this.props} />;\n    }\n  }\n  const ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n  return ConnectedAuthRedirectComponent;\n};\n\nexport default withAuthComponent;\n","export default __webpack_public_path__ + \"static/media/avatar.f0ed1e1e.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__1qUN5\"};","/* eslint-disable */\nimport React, { useEffect, useState } from 'react';\n\nconst ProfileStatusHooks = (props) => {\n  const [editMode, setEditMode] = useState(false);\n  const [status, setStatus] = useState(props.status);\n  useEffect(() => {\n    setStatus(props.status)\n  }, [props.status])\n  const activateEditMode = () => {\n    setEditMode(true);\n  }\n  const deactivateEditMode = () => {\n    setEditMode(false);\n    props.putStatus(status);\n  }\n  const onStatusChange = (e) => {\n    setStatus(e.currentTarget.value);\n  }\n  return <>\n    {!editMode && <span\n      onDoubleClick={activateEditMode}>{props.status}\n    </span>\n    }\n\n    {editMode && <input\n      onChange={onStatusChange}\n      autoFocus={true}\n      onBlur={deactivateEditMode}\n      type=\"text\"\n      value={status}\n    />\n    }\n  </>\n}\n\n\n\nexport default ProfileStatusHooks;\n","/* eslint-disable */\nimport React from 'react';\n\nconst UserContacts = ({title,value = 'not information'}) => {\n  return <div>\n    <p>\n      {title}: {value}\n    </p>\n  </div>\n}\n\nexport default UserContacts;\n","/* eslint-disable */\nimport React from 'react';\nimport avatar from '../../../assets/images/avatar.png';\nimport Preloader from '../../preloader/Preloader';\nimport ProfileStatusHooks from './ProfileStatus/ProfileStatusHooks';\nimport UserContacts from '../../Contacts/UserContacts';\n\nconst ProfileInfo = ({isOwner, profile, status, putUserStatusTC, savePhotoTC }) => {\n  const photoSelected = (e) => {\n    if (e.target.files.length) {\n      savePhotoTC(e.target.files[0]);\n    }\n  }\n  if (!profile) {\n    return <Preloader />\n  }\n  const {\n    photos, fullName,\n    lookingForAJob, aboutMe,\n    lookingForAJobDescription,\n    contacts\n  } = profile;\n  {\n    console.log(Object.entries(contacts));\n  }\n  return (\n    <>\n      <div>\n        <img src={photos.large ? photos.large : avatar} width={150} height={150} alt=\"avatar\" />\n        {isOwner && <input type={'file'} onChange={photoSelected}/>}\n      </div>\n      <div>\n        <p>\n          Status: <ProfileStatusHooks\n          status={status} putStatus={putUserStatusTC} />\n        </p>\n        <p>name: {fullName}</p>\n        <p>\n          Looking for a job: {lookingForAJob ? 'yes' : 'no'}\n        </p>\n        {lookingForAJob && <p>\n          My professionals skills: {lookingForAJobDescription}\n        </p>}\n      </div>\n      <div>\n        Contacts: {Object.entries(contacts).map(values => {\n        if(values[1]) {\n          return <UserContacts key={values[0]}\n                               title={values[0]}\n                               value={values[1]}/>\n        }\n        return null\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default ProfileInfo;\n","/* eslint-disable */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Post = React.memo(({ message }) => {\n  console.log('render Post');\n  return (\n    <div>\n      {message}\n    </div>\n  );\n})\n\nPost.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n// function Post({ message }) {\n//   console.log('render Post');\n//   return (\n//     <div>\n//       {message}\n//     </div>\n//   );\n// }\n\n// Post.propTypes = {\n//   message: PropTypes.string.isRequired,\n// };\n\n\nexport default Post;\n","/* eslint-disable */\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nconst AddPostForm = ({ handleSubmit }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <Field component=\"textarea\" name=\"postText\" />\n      </div>\n      <div>\n        <button>add message</button>\n      </div>\n    </form>\n  );\n};\n\nconst AddPostReduxForm = reduxForm({\n  form: 'addPost',\n})(AddPostForm);\n\nexport default AddPostReduxForm;\n","/* eslint-disable */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Post from './Post/Post';\nimport AddPostForm from './AddPostForm/AddPostForm'\n\nconst MyPosts = (props) => {\n  console.log('render MyPosts')\n  const { posts } = props.profilePage;\n  const addPost = ({ postText }) => {\n    props.addPost(postText);\n  };\n  const postsComponents = posts.map((post) => <Post message={post.post} />);\n  return (\n    <div>\n      <AddPostForm onSubmit={addPost} {...props} />\n      {postsComponents}\n    </div>\n  );\n}\n\nMyPosts.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    post: PropTypes.string.isRequired,\n  })).isRequired,\n  addPost: PropTypes.func.isRequired,\n  updateNewPostText: PropTypes.func.isRequired,\n};\n\nexport default MyPosts;\n","import { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport MyPosts from './MyPosts';\nimport { addPostAC, updateNewPostTextAC } from '../../../redux/profileReducer';\nimport withAuthComponent from '../../../HOC/withAuthRedirect';\n\nconst mapStateToProps = (state) => ({\n  profilePage: state.profilePage,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  addPost: (text) => {\n    dispatch(addPostAC(text));\n  },\n  onPostChange: (text) => {\n    dispatch(updateNewPostTextAC(text));\n  },\n});\n\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthComponent,\n)(MyPosts);\n","/* eslint-disable */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport P from './Profile.module.css';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport PostsContainer from './MyPosts/PostsContainer';\nimport { savePhotoTC } from '../../redux/profileReducer';\n//todo: добавить загрузку своего профиля\nfunction Profile({...props}) {\n  return (\n    <div className={P.content}>\n      <ProfileInfo {...props}\n      />\n      <PostsContainer />\n    </div>\n  );\n}\n\nProfile.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    post: PropTypes.string.isRequired,\n  })).isRequired,\n};\n\nexport default Profile;\n","/* eslint-disable */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Profile from './Profile';\nimport {\n  getProfileTC, setUserProfileAC,\n  getUserStatusTC, putUserStatusTC, savePhotoTC\n} from '../../redux/profileReducer';\nimport { withRouter } from 'react-router';\nimport withAuthComponent from '../../HOC/withAuthRedirect';\nimport { compose } from 'redux';\n\nclass ProfileContainer extends React.Component {\n  //todo: пофиксить баг со статусом\n  refreshProfile() {\n    let userId = this.props.match.params.userId;\n    if (!userId) userId = this.props.id;\n    this.props.getProfileTC(userId);\n    this.props.getUserStatusTC(userId);\n  }\n\n  componentDidMount() {\n    this.refreshProfile();\n  }\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if(this.props.match.params.userId !== prevProps.match.params.userId) {\n      this.refreshProfile();\n    }\n  }\n\n  render() {\n    return <Profile {...this.props}\n    isOwner={!this.props.match.params.userId}\n    />;\n  }\n}\n\nconst mapStateToProps = ({ profilePage,auth }) => ({\n  id: auth.id,\n  profile: profilePage.profile,\n  status: profilePage.status\n});\n\nexport default compose(\n  connect(mapStateToProps, {\n    setUserProfile: setUserProfileAC,\n    getProfileTC,\n    getUserStatusTC,\n    putUserStatusTC,\n    savePhotoTC,\n  }),\n  withAuthComponent,\n  withRouter\n)(ProfileContainer);\n"],"sourceRoot":""}